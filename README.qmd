---
format: gfm
knitr:
  opts_chunk:
    fig.path: "man/figures/README-"
    cache: true
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

```{r setup}
#| include: false

library(boundr)
library(tmap)
library(ggplot2)
conflicted::conflicts_prefer(boundr::points)

```

# welcome to boundr

<!-- badges: start -->

<!-- badges: end -->

### Retrieve area boundaries and data from the ONS Open Geography Portal

<div style="display: flex; align-items: center;">

<div style="flex: 0 0 auto; margin-right: 20px;">
  <img
    src="boundr_hex_logo.png"
    style="height: 300px; width: 259px;"
    alt="The boundr package hexagonal logo - the word boundr superimposed on a cropped map of the Isles of Scilly, with the island parishes differently coloured, on a sea blue background."
  />
</div>

<div>
The main purpose of this package is to download area lookups and
boundaries to R tables, using the ONS Open Geography API, for all
areas at a specified level within a specified area.

The main script `bounds()` will return a data frame with the sub-area
geometry column, as an `sf` object ready to be visualised as a map.
</div>

</div>

## Installation

You can install this package from the `R` console by entering

> remotes::install_git("https://codeberg.org/francisbarton/boundr")

if you have the `remotes` package installed.

## Examples

### Basic lookup of areas within a larger area, by name

Returns sfc tibble with latest available data

```{r example-1}

bounds("msoa", "lad", "Swansea")

```


### Lookup areas with older dates

Trial and error may be required - or start by looking up what is available on the OpenGeography site.

```{r example-2}

bounds("msoa", "lad", "Shepway", lookup_year = 2011, within_year = 2015)

```


### Alternative ways to achieve a goal

In this case, the first option is notably quicker than the second, because they use different tables to create the lookup table.

The second option fails to return boundaries unless the year option is included, as it creates a lookup table for rgn23 and ctry23 but boundaries are not available for rgn23 (only rgn22).

Different columns are returned by each command.

```{r example-3}
#| message: false

bounds("rgn", country_filter = "EN", resolution = "BUC")
bounds("region", "country", "England", lookup_year = 2022, resolution = "BUC")

```


### You can just request bare lookup tables - no spatial data attached

```{r example-4}

create_lookup_table("spc", "spr")

```


### A lookup table for Welsh local authorities to Senedd electoral regions

Sometimes boundr needs a little help finding what you are looking for.
Supplying a year or country filter can help get the right table.

Using `return_with = "full"` includes all available columns, not just those referred to by the `lookup` and `within` arguments.

```{r example-5}

# This doesn't succeed:
# create_lookup_table("wd", "sener")

# supplying a year helps:
create_lookup_table("wd", "sener", lookup_year = 2023, return_width = "full")

# or a country filter:
create_lookup_table("wd", "sener", country_filter = "WA", return_width = "full") |>
  dplyr::filter(sener23nm == "South Wales West")

```


### The sfc tibble is ready to be passed to a mapping tool like `tmap::qtm()`:

```{r example-6}
#| message: false

bounds("parish", "lad", "Isles of Scilly") |>
  tmap::tm_shape() +
  tmap::tm_polygons(
    col = "par23nm",
    palette = "-Accent",
    legend.show = FALSE,
    border.col = "grey40"
  ) +
  tmap::tm_style("natural", bg.color = "#7cb7bb")

```


### bounds now supports a shortcut which will return all bounds for a certain level, without having to specify a 'within' argument

Take care - you might download a lot of data doing this!

```{r example-7}

bounds("spr")

```

### The points() function returns area (population-weighted) centroids where available

(Check the OpenGeography website).

```{r example-8}
#| message: false

sb <- bounds("msoa", "lad", "Swindon")
sp <- points("msoa", "utla", "Swindon")

sb |>
  ggplot2::ggplot() +
  ggplot2::geom_sf(colour = "grey33", fill = "grey95") +
  ggplot2::geom_sf(data = sp, colour = "orange") +
  ggplot2::theme_void()

```

### A ggplot2 example

Here we specify a 'within_names' argument alongside the 'lookup' argument.
There's no 'within' argument to be specified because there's nothing to lookup.
(There aren't any lookup tables for National Parks - just the boundaries).


```{r example-9}

bounds("npark", within_names = "Bannau Brycheiniog", resolution = "BUC") |>
  ggplot2::ggplot() +
  ggplot2::geom_sf()

```


```{r example-10}

# https://github.com/francisbarton/mapirosa
library(mapirosa)

# https://dieghernan.github.io/tidyterra/reference/geom_spatraster_rgb.html
library(tidyterra)

bb <- bounds(
  "npark",
  within_names = "Bannau Brycheiniog",
  resolution = "BUC",
  crs = 27700
)

bb_basemap <- mapirosa::build_basemap(
  bbox = sf::st_bbox(bb),
  zoom = 3,
  style = "outdoor",
  squarify = TRUE,
  crs = 27700
) |>
  rlang::with_interactive(FALSE)

ggplot2::ggplot(bb) +
  tidyterra::geom_spatraster_rgb(
    data = bb_basemap,
    maxcell = 1e7,
    max_col_value = 1
  ) +
  ggplot2::theme_void() +
  ggplot2::geom_sf(colour = "coral", fill = "aquamarine", alpha = 0.3)
```


### Aliases

For certain geographic levels you can supply a more human-friendly alias, so you don't need to remember the abbreviated prefix.

| alias   | actual argument (geo prefix) used |
| ----    | ---- |
| parish  | par  |
| ward    | wd   |
| region  | rgn  |
| county  | cty  |
| country | ctry |

Ideas for other useful aliases happily received.


## Package internal structure

The structure of the project looks a bit like this:

    bounds() / points() [main UI functions]
       ^
       |
       |
        <-------  create_lookup_table() [available to the user]
       |                ^
       |                |
       |                 <--------- return_query_data()
       |                |
       |                 <--------- return_lookup_query_info() 
       |                                       \
       |                                        \
        <-------  return_spatial_data()           <----- opengeo_schema [data]
                        ^                       /              ^
                        |                      /               |
                         <--------  pull_geo_query_url()       |
                                                               |
                                                         build_schema()

When you call `bounds()` you specify a lower level area (eg ward) and a higher
level area (eg local authority), and you specify either the name of the higher
level area (or areas) or its code.

`return_lookup_query_info()` then finds the API query URL of a suitable lookup
table - one that contains columns for both your lower and higher level areas.
It does this by filtering `opengeo_schema`, which is a cached copy of the
various datasets available from the Open Geography API Services list.
This schema is available as internal data in the package - but may need
updating.

`create_lookup_table()` then builds a lookup table (a tibble) based on all the
areas you have said you are interested in.
At the same time, `return_spatial_data()` will - if you have specified you want
spatial boundaries data for your areas - retrieve the boundary data at your
chosen resolution for your lower level areas.
These will then be joined onto the lookup table and provided to you as an
`sfc` tibble.


## Contributing

Suggestions for improvements are welcome, preferably posted as an issue
here on GitHub.
Contributions as pull requests are also welcome.

Please note that `boundr` is released with a [Contributor Code of
Conduct](https://contributor-covenant.org/version/2/0/CODE_OF_CONDUCT.html).
By contributing to this project, you agree to abide by its terms.



## News

See [NEWS.md](NEWS.md) for version notes.


`boundr` was previously
[`jogger`](https://github.com/francisbarton/jogger).

### Licences

The code in this repo is MIT licensed.

The data that the code helps you retrieve is issued under a variety of
licences, including:

-   the [Open Government Licence
    v3.0](https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/)

> Licensing statement [as stipulated by the
> ONS](https://www.ons.gov.uk/methodology/geography/licences):
>
> -   Source: Office for National Statistics licensed under the [Open
>     Government Licence
>     v3.0](https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/)
> -   Contains OS data Â© Crown copyright and database right `r format(Sys.Date(), "%Y")`
